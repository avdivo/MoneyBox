<!DOCTYPE HTML>
<html>
 <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, height=device-height, initial-scale=0.6">
  <title>История</title>
  <style>
      
    body {
        font-family: Trebuchet MS, "Helvetica CY", "Nimbus Sans L", sans-serif;
    }

    /* Контейнер Для всего */
    .container {
    width: 575px;
    max-width: 575px;
    background:#000000;
    padding: 10px; /* Поля вокруг текста */
    margin: auto; /* Выравниваем по центру */
    border-radius: 0 10px;
    }
  
    /* Основной белый контейнер для списков */
    .deviceBox {
    width: 95%;
    background: #FFFFFF;
    margin: auto; /* Выравниваем по центру */
    border-radius: 0 10px;
    margin-top: 5px; /* Отступ сверху */
    padding: 12px 9px 9px;
    text-align: left;
    }
    
    /* Название Копилки */
    .nomnam {
    background: #0000FF;
    padding: 10px; /* Поля вокруг текста */
    margin: auto; /* Выравниваем по центру */
    margin-bottom: 0px;
    border-radius: 0 10px;
    color: #FFFFFF;
    font-size:20px;
    }

    /* Номер копилки*/
    .nom {
    display:inline-block;
    width: 10%;
    font-size:20px;
    font-weight: bold;
    color: #FFFFFF;
    }

    /* Название копилки*/
    .nam {
    display:inline-block;
    width: 450px;
    font-size:20px;
    font-weight: bold;
    color: #FFFFFF;
    text-align:right;
    }

    /* Сумма*/
    .sum {
    display:inline-block;
    width: 170px;
    font-size:42px;
    font-weight: bold;
    color: #0000FF;
    text-align: right;
    vertical-align: .28em;
    }
    
    /* Слово История */
    .hist {
    display:inline-block;
    width: 170px;
    font-size:42px;
    font-weight: bold;
    color: #535353;
    text-align: right;
    vertical-align: .3em;
    padding: 10px 50px; /* отступ от текста */
    }

    /* Символ для Редактирования и Статистики */
    .link {
    font-size: 24px;
    margin: 5px 5px; /* отступ от текста */
    vertical-align: .8em;
    text-decoration: none; /* Убирает подчеркивание для ссылок */
    }

     /* Название копилки в строке истории */
    .userbox {
    font-size: 10px;
    }   
    
    /* Название копилки в строке истории */
    .namebox {
    font-weight: bold;
    }

     /* Сумма в строке истории */
    .money {
    color: #ff0000;
    }
   
    /* Значек для перехода в JS для погашения долга */
    .string {
    font-size: 16px;
    margin-left: 20px;
    display: inline-block;
    cursor: pointer;
    }

    /* Контейнер Нижняя панель с кнопками*/
    .keys1 {
    width: 95%;
    height: 40px;
    background: #FFFFFF;
    border-radius: 0 10px;
    margin-top: 5px; /* Отступ сверху */
    margin-bottom: 10px;
    padding: 8px 9px 9px;
    margin-bottom: 6px;
    }

    /* Кнопка */
    .button2 {
    font-size:18px;
    font-weight: bold;
    border-radius: 0 10px;
    width: 120px;
    margin-left: 5px;
    margin-right: 5px;
    padding: 8px; /* Отступ от текста до бордюра */
    background-color: white; 
    color: black; 
    border: 2px solid #0000FF;
    cursor: pointer;
    outline: none;
      display: inline-block;
    vertical-align: .6em;
    }
    /* Нажатая Кнопка */
    .button2:hover {
        background-color: #0000FF;
        color: white;
    }

  </style>
 </head>
 <body>
    <div align="center">
        <div class="container">
                
            <div class="deviceBox">
                <div class="nomnam">
                    <div class="nom">{{ box.nnBox }}</div> <!-- Номер Копилки -->
                    <div class="nam">{{ box.nameBox }}</div> 
                </div>

                <div class="sum" id="sum">{{ box.summaBox }}</div> <!-- Сумма в Копилке. Меняется при отмене операций-->
                <div class="hist">История</div> 

                <!-- По этим ссылкам методом GET передается номер копилки -->
                <a class="link" title="Редактирование" href="index.php?box_edit={{ box.idBox }}">&#9998;</a>
                <a class="link" title="Статистика" {% if box.idBox != 1 %}href="index.php?box_stat={{ box.idBox }}"{% endif %}>&#128269;</a>  <!-- Для бюджета статистика не работает -->

            </div>
            
            <!-- Список операций в истории. Каждая запись имеет свой номер, это номер в таблице истории в БД.
               Он используется для удаления строки и передается скрипту при нажатии на кнопку Отмены -->
            <div class="deviceBox" id="allString">
                {% for string in history %}

                    <div id='string{{ string.id }}'><!-- Для удаления операции служит этот div с id = string + номер в истории -->
                        {{ string.date }} &#8658; 
                        {{ events[string.event] }} <span  class="namebox">{{ partners[string.partner] }}</span> - 
                        <span  class="money">{{ string.summa }}</span>
                        <div class="string" title="Отменить" onclick="cancel('{{ string.id }}')">&#10060;</div>
                        <span  class="userbox">({{ string.username }})</span>
                    </div>

                {% endfor %}
            </div>

            <div class="keys1">
                
                <button class="button2" onclick="document.location='index.php'">Ок</button>
                
            </div>

            </div>
        </div>

    </div>

 </body>
 
 <script type="text/javascript">

    //Переход на отмену операции
    //Передаем в функцию номер операции в истории
    function cancel (value)
    {

        //Собираем парамерты (номер операции в истории) в переменной cancel и номер копилки в переменной box
        //и готовим строку для GET запроса
        var param = 'cancel=' + value + '&box=' + {{ box.idBox }};
        SendRequest("GET","index.php", param, Handler); //Отправляем AJAX запрос, передаем отредактированный долг

    }

    /*Создаем функцию обработчик AJAX запроса
    Функция получает результат выполнения операции в виде новой ссумы в копилке и номена операции в истории. 
    Так же переменная string может быть не пустой, это значит что произошло удаление операции возврата долга или 
    прощения долга, в таком случае создается новый долг и новая запись истории. Старую удаляем, а из строки 
    вставляем новую в начало списка.
    Или -1, если отмена не удалась*/
    var Handler = function(Request)
    {
        var result = Request.responseText; //Возвращяем результат выполнения
        //В переменной result приходит ответ в строке JSON с ключами 
        //nomer - номер удаленной операции в истории, для удаления строки со страницы
        //summa - сумма в копилке
        // или -1 который сообщяет о ошибке в выполнении запроса
        if (result != -1) 
        {
            var mass = JSON.parse(result); //Массив в JSON
            var nomer = mass['nomer']; //Получаем номер удаленной операции в истории
            var summa = mass['summa']; //Получаем сумму в копилке
            var string = mass['string']; //Получаем строку для замены в истории
            document.getElementById("sum").innerHTML = summa.toLocaleString('ru-RU'); //Выводим на экран в денежном формате

            var element = document.getElementById('string'+nomer); //Получаем div блок строки операции для удаления
            element.remove(); //Удаляем строку
            
            if (string != 'nothing')
            {
                var div = document.getElementById('allString');
                div.innerHTML = string + div.innerHTML;
            }
            

        } else alert ("Отмена операции не выполнена.");

    }


// ------------------------------ AJAX -------------------------------------------------
//Функция для упрощения обмена данными с сервером. https://habr.com/ru/post/14246/
//--------------------------------------------------------------------------------------
//Пример вызова
/*
function ReadFile(filename, container)
{
    //Создаем функцию обработчик
    var Handler = function(Request)
    {
        document.getElementById(container).innerHTML = Request.responseText;
    }
    
    //Отправляем запрос
    SendRequest("GET",filename,"",Handler);
    
}
*/

//Создание объекта XMLHttpRequest в разных браузерах
function CreateRequest()
{
    var Request = false;

    if (window.XMLHttpRequest)
    {
        //Gecko-совместимые браузеры, Safari, Konqueror
        Request = new XMLHttpRequest();
    }
    else if (window.ActiveXObject)
    {
        //Internet explorer
        try
        {
             Request = new ActiveXObject("Microsoft.XMLHTTP");
        }    
        catch (CatchException)
        {
             Request = new ActiveXObject("Msxml2.XMLHTTP");
        }
    }
 
    if (!Request)
    {
        alert("Невозможно создать XMLHttpRequest");
    }
    
    return Request;
} 


/*Для создания запроса к серверу мы создадим небольшую функцию,
которая будет по функциональности объединять в себе функции для GET и POST запросов.*/

/*
Функция посылки запроса к файлу на сервере
r_method  - тип запроса: GET или POST
r_path    - путь к файлу
r_args    - аргументы вида a=1&b=2&c=3...
r_handler - функция-обработчик ответа от сервера
r_syn     - true - асинхронный запрос AJAX, false - синхронный
*/
function SendRequest(r_method, r_path, r_args, r_handler, r_syn)
{
    //Если переменная r_syn не определена делаем ее по умолчанию true
    if (r_syn === undefined) r_syn = true;

    //Создаём запрос
    var Request = CreateRequest();
    
    //Проверяем существование запроса еще раз
    if (!Request)
    {
        return;
    }
    
        //Назначаем пользовательский обработчик
        Request.onreadystatechange = function()
        {
            //Если обмен данными завершен
            if (Request.readyState == 4)
            {
                if (Request.status == 200)
                {
                    //Передаем управление обработчику пользователя
                    r_handler(Request);
                }
                else
                {
                    //Оповещаем пользователя о произошедшей ошибке
                    alert ('Ошибка соединения ' + Request.status);
                }
            }
            else
            {
                //Оповещаем пользователя о загрузке
            }
        
        }
    
    //Проверяем, если требуется сделать GET-запрос
    if (r_method.toLowerCase() == "get" && r_args.length > 0)
    r_path += "?" + r_args;
    
    //Инициализируем соединение
    Request.open(r_method, r_path, r_syn);
    if (r_method.toLowerCase() == "post")
    {
        //Если это POST-запрос
        
        //Устанавливаем заголовок
        Request.setRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=utf-8");
        //Посылаем запрос
        Request.send(r_args);
    }
    else
    {
        //Если это GET-запрос
        
        //Посылаем нуль-запрос
        Request.send(null);
    }
} 




 </script>
 
</html>